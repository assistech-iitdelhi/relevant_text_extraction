<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xml:lang="en-US" xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>The Sparse Fourier Transform: Theory and Practice</title>
<link rel="stylesheet" type="text/css" href="../styles/stylesheet.css"/>
<link rel="stylesheet" type="application/vnd.adobe-page-template+xml" href="../styles/page-template.xpgt"/>
</head>
<body>
<p class="chno"><a id="page_83"/><b>7</b></p>
<p class="chtitle"><b>GHz-Wide Spectrum Sensing and Decoding</b></p>
<p class="h1"><b><a id="ch7_1"/><span class="big">7.1</span>&#160;&#160;&#160;&#160;Introduction</b></p>
<p class="noindent">The rising popularity of wireless communication and the potential of a spectrum shortage have motivated the FCC to take steps toward releasing multiple bands for dynamic spectrum sharing [FCC 2010]. The government&#8217;s interest in re-purposing the spectrum for sharing is motivated by the fact that the actual utilization of the spectrum is sparse in practice. For instance, <a href="#fig7_1">Figure 7.1</a> from the Microsoft Spectrum Observatory [Microsoft Spectrum Observatory 2017] shows that, even in urban areas, large swaths of the spectrum remain underutilized. To use the spectrum more efficiently, last year, the President&#8217;s Council of Advisors on Science and Technology (PCAST) [PCAST 2012] has advocated dynamic sharing of much of the currently under-utilized spectrum, creating GHz-wide spectrum superhighways &#8220;that can be shared by many different types of wireless services, just as vehicles share a superhighway by moving from one lane to another.&#8221;</p>
<div class="cap">
<p class="image"><a id="fig7_1"/><img src="../images/fig7_1.png" alt="image"/></p>
<p class="figcaption"><b>Figure 7.1</b> Spectrum occupancy. The figure shows the average spectrum occupancy at the Microsoft spectrum observatory in Seattle on Monday, January 14, 2013, during the hour between 10 <small>AM</small> and 11 <small>AM</small>. The figure shows that between 1 GHz and 6 GHz the spectrum is sparsely occupied.</p>
</div>
<p class="indent"><a id="page_84"/>Motivated by this vision, this chapter presents BigBand, a technology that enables real-time GHz-wide spectrum sensing and reception using low-power radios, similar to those in WiFi devices. Making GHz-wide sensing (i.e. the ability to detect occupancy) and reception (i.e. the ability to decode) available on commodity radios enables new applications:</p>
<p class="bull">&#8226;&#160;&#160;In particular, real-time GHz sensing enables highly dynamic spectrum access, where secondary users can detect short sub-millisecond spectrum vacancies and leverage them, thereby increasing the overall spectrum efficiency [Baykas et al. 2012].</p>
<p class="bull">&#8226;&#160;&#160;Further, a cheap, low-power GHz spectrum sensing technology enables the government and the industry to deploy thousands or such sensors in a metropolitan area for large-scale real-time spectrum monitoring. This will enable a better understanding of spectrum utilization, identification, and localization of breaches of spectrum policy, and a more-informed planning of spectrum allocation.</p>
<p class="bull">&#8226;&#160;&#160;Beyond sensing, the ability to decode signals in a GHz-wide band enables a single radio to receive concurrent transmissions from diverse parts of the spectrum. This would enable future cell phones to use one radio to concurrently receive Bluetooth at 2.4 GHz, GSM at 1.9 GHz, and CDMA at 1.7 GHz.</p>
<p class="indentt">Real-time GHz signal acquisition, however, is challenging. For example, existing methods for spectrum sensing, like those used in the Microsoft spectrum observatory [Microsoft Spectrum Observatory 2017], do not work in real time. They rely on sequential hopping from one channel to the next, acquiring only tens of MHz at a time [RFeye Node 2017, Tektronix 2017]. As a result, each band is monitored only occasionally, making it easy to miss short lived signals (e.g., radar).</p>
<p class="indent">The key difficulty in capturing GHz of bandwidth in real time stems from the need for high-speed analog-to-digital converters (ADCs), which are costly, power hungry, and have a low bit resolution [Greshishchev et al. 2010, Murmann 2008]. Compare typical low-speed ADCs used in WiFi or cellular phones with the very high speed ADCs needed to capture GHz of bandwidth. A 100 MS/s ADC, like in Wi-Fi receivers, costs a few dollars, consumes a few milliwatts, and has a 12- to 16-bit resolution [DigiKey ADCs 2017, Murmann 2008, Tanet et al. 2012]. In contrast, a high-speed ADC that can take multiple giga-samples per second may cost hundreds <a id="page_85"/>of dollars, consume multiple orders of magnitude more power, and have only 6- to 8-bits resolution [DigiKey ADCs 2017, Greshishchev et al. 2010, Murmann 2008].</p>
<p class="indent">In this chapter, we explore how one can achieve the best of both worlds. Specifically, we would like to capture GHz of spectrum but using only few ADCs that sample the signal at tens of MS/s.</p>
<p class="indent">We introduce BigBand, a technology that can acquire GHz of signal using a few (3 or 4) low-speed ADCs. BigBand can do more than spectrum sensing&#8212;the action of detecting occupied bands. It can also decode the signal (i.e., obtain the I and Q components). To achieve its goal, BigBand builds on the Sparse Fourier Transform algorithms, described in <a href="10_Part01.xhtml">Part I</a> of this book, to recover the wireless spectrum using only a small subset of samples, i.e., it can recover GHz of spectrum without sampling it at the Nyquist rate.</p>
<p class="indent">Some past work has proposed using compressive sensing to acquire GHz signals at sub-Nyquist rate [Laska et al. 2011, Rashidi et al. 2011, Tropp et al. 2010, Yoo et al. 2012a]. BigBand builds on this work but differs from it substantially. Approaches based on compressive sensing require random sampling of the signal which cannot be done simply by using standard low-speed ADCs. It needs analog mixing at Nyquist rates [Laska et al. 2011, Yoo et al. 2012a] and expensive processing to recover the original signal. Such a design is quite complex and could end up consuming as much power as an ADC that samples at the Nyquist rate [Abari et al. 2012, Abari et al. 2013]. Like the compressive-sensing approaches, BigBand can acquire a wideband signal without sampling it at the Nyquist rate. Unlike compressive sensing, however, BigBand does not need analog mixing or random sampling and can work using commodity radios and standard low-speed ADCs. Further, it computes the Fourier transform of a sparse signal faster than the FFT, reducing baseband processing.</p>
<p class="indent">We have built a working prototype of BigBand using USRP software radios. Our prototype uses three USRPs, each of which can capture 50 MHz bandwidth to produce a device that captures 0.9 GHz, i.e., 6&#215; larger bandwidth than the digital bandwidth of the three USRPs combined. We have used our prototype to sense the spectrum between 2 GHz and 2.9 GHz, a 0.9-GHz stretch used by diverse technologies [Microsoft Spectrum Observatory 2017]. Our outdoor measurements reveal that, in our metropolitan area,<sup><a id="fn1" href="#rfn1">1</a></sup> the above band has an occupancy of 2&#8211;5%. These results were verified using a spectrum analyzer are in sync with similar measurements conducted at other locations [Microsoft Spectrum Observatory 2017]. We <a id="page_86"/>further use our prototype to decode 30 transmitters that are simultaneously frequency hopping in a 0.9 GHz band, hence demonstrating that BigBand not only senses their power but also decodes the signals.</p>
<p class="indent">Finally, we have extended BigBand to perform spectrum sensing (not decoding) even when the spectrum utilization is not sparse. To do so, we leverage the idea that even if the spectrum itself is densely occupied, only a small fraction of the spectrum is likely to change its occupancy over short intervals of a few milliseconds. We build on this basic idea to sense densely occupied spectrum using sub-Nyquist sampling. We also evaluate our design empirically showing that it can detect frequency bands that change occupancy even when the spectrum is 95% occupied.</p>
<p class="h1"><b><a id="ch7_2"/><span class="big">7.2</span>&#160;&#160;&#160;&#160;Related Work</b></p>
<p class="noindent">BigBand is related to signal acquisition via digital and analog compressive sensing [Laska et al. 2011, Mishali and Eldar 2010, Mishali and Eldar 2011, Rashidi et al. 2011, Tropp et al. 2010, Yoo et al. 2012a, Yoo et al. 2012b]. However, compressive sensing needs random sampling and analog mixing at Nyquist rates [Laska et al. 2011, Mishali and Eldar 2011, Yoo et al. 2012a]. These approaches cannot be built using commodity radios and ADCs with regular sampling; they require a custom design and could end up consuming as much power as an ADC that samples at the Nyquist rate [Abari et al. 2012, Abari et al. 2013]. Furthermore, compressive sensing does not directly compute the spectrum representation of the signal and still needs to perform heavy computation to recover the spectrum, which is power consuming.</p>
<p class="indent">BigBand is also related to theoretical work in signal processing on co-prime sampling [Vaidyanathan and Pal 2011, Xia 1999, Xia 2000]. In Xia [1999] and Xia [2000], co-prime sampling patterns are utilized to sample sparse spectrum. These methods however require <i>k</i> ADCs with co-prime sampling patterns, where <i>k</i> is the number of occupied frequencies. In contrast, using the Sparse Fourier Transform allows us to use only a constant small number of ADCs. Our system is further implemented and shown to work in practice. In Vaidyanathan and Pal [2011], co-prime sampling is used to sample linear antenna arrays. This work however assumes the presence of a second dimension where signals can be fully sampled and cross-correlated and hence cannot be used for spectrum acquisition.</p>
<p class="indent">Also relevant to our work is the theoretical work on using multicoset sampling to capture the signals in a wideband sparse spectrum with a small number of low-speed ADCs [Herley and Wong 1999, Venkataramani and Bresler 2000]. However, in order to recover the original signals from the samples, these techniques require prior knowledge of the locations of occupied frequencies in the spectrum and <a id="page_87"/>hence are not useful for spectrum sensing. In contrast, our approach recovers both the locations of the occupied frequencies and the signals in these frequencies and thus can be used for both spectrum sensing and decoding.</p>
<p class="indent">Some proposals for test equipment reconstruct wideband periodic signals by undersampling [Tzou et al. 2012, Silva 1986]. These approaches, however, assume that the signal is periodic&#8212;i.e., the same signal keeps repeating for very long time&#8212;which allows them to take one sample during each period until all samples are recovered and rearranged in the proper order. Although this requires one low speed ADC, it is only applicable to test equipment where the same signal is repeatedly transmitted [Tzou et al. 2012].</p>
<p class="indent">There is significant literature about spectrum sensing. Most of this work focuses on narrowband sensing [Yucek and Arslan 2009, Bahl et al. 2009, Rahul et al. 2008]. It includes techniques for detecting the signal&#8217;s energy [Bahl et al. 2009], its waveform [Yucek and Arslan 2009], its cyclostationarity [Hong and Katti 2011], or its power variation [Rahul et al. 2008]. In contrast, we focus on wideband spectrum sensing, an area that is significantly less explored. A recent system called Quick-Sense [Yoon et al. 2013] senses a wideband signal using a hierarchy of analog filters and energy detectors. BigBand differs from QuickSense in that it can recover the signal (obtain the I and Q components) as opposed to only detecting spectrum occupancy. Second, for highly utilized spectrum (i.e., not sparse), the approach in Yoon et al. [2013] reduces to sequentially scanning the spectrum whereas BigBand&#8217;s extension for the non-sparse case provides a fast sensing mechanism.</p>
<p class="indent">Finally, the proposed research complements the geo-location database required by the FCC for identifying the bands occupied by primary users (e.g., the TV stations in the white spaces). The database, however, has no information about frequencies occupied by secondary and unlicensed users in the area. Also, due to the complexity of predicting propagation models, the database provides only long-term predictions, and can be inaccurate, particularly with dynamic access patterns [FCC 2010, Baykas et al. 2012].</p>
<p class="h1"><b><a id="ch7_3"/><span class="big">7.3</span>&#160;&#160;&#160;&#160;BigBand</b></p>
<p class="noindent">BigBand is a receiver that can recover sparse signals with sub-Nyquist sampling using low-power commodity radios. BigBand can do more than spectrum sensing&#8212;the action of detecting occupied bands. It provides the details of the signals in those bands (I&#8217;s and Q&#8217;s of wireless symbols), which enables decoding those signals.</p>
<p class="indent">BigBand uses the Sparse Fourier Transform to acquire sparse spectra using low-speed ADCs. In this section, we explain how BigBand adapts the Sparse Fourier Transform for the application of spectrum acquisition. We use <b>x</b> and <b>x&#770;</b> to denote a <a id="page_88"/>time signal and its Fourier transform, respectively. We also use the terms: the <i>value</i> of a frequency and its <i>position</i> in the spectrum to distinguish <b>x&#770;</b><sub><i>f</i></sub> and <i>f</i>. BigBand discovers the occupied frequency positions <i>f</i> and estimates their values <b>x&#770;</b><sub><i>f</i></sub>. Once <b>x&#770;</b> is computed, it can recover the time signal <b>x</b> and decode the wireless symbols.</p>
<p class="indent">Following the Sparse Fourier Transform framework set in <a href="09_Chapter01.xhtml#ch1_1_2">Section 1.1.2</a>, Big-Band&#8217;s design has three components: frequency <i>bucketization, estimation</i>, and <i>collision resolution</i>. Below we re-explain these components in the context of wireless signal acquisition and processing. A theoretical analysis of BigBand&#8217;s Sparse Fourier Transform algorithm follows immediately from <a href="14_Chapter05.xhtml">Chapter 5</a>.<sup><a id="fn2" href="#rfn2">2</a></sup></p>
<p class="h2"><a id="ch7_3_1"/><b><span class="big1">7.3.1</span>&#160;&#160;&#160;&#160;Frequency Bucketization</b></p>
<p class="noindent">BigBand starts by hashing the frequencies in the spectrum into buckets. Since the spectrum is sparsely occupied, many buckets will be empty and can be simply discarded. BigBand then focuses on the non-empty buckets, and computes the values of the frequencies in those buckets in what we call the estimation step.</p>
<p class="indent">In order to hash frequencies into buckets, BigBand uses the aliasing filter described in <a href="09_Chapter01.xhtml#ch1_1_2">Section 1.1.2</a>. Recall that, if <b>b</b> is a subsampled version of the wireless signal <b>x</b> of bandwidth <i>BW</i>, i.e., <b>b</b><sub><i>i</i></sub> = <b>x</b><sub><i>i</i> &#183; <i>p</i></sub> where <i>p</i> is the subsampling factor, then, <b>b&#770;</b>, the FFT of <b>b</b> is an aliased version of <b>x&#770;</b>, i.e.,</p>
<p class="eqn"><a id="eq7_1"/><img src="../images/eq7_1.png" alt="image"/></p>
<p class="indent">Thus, the aliasing filter will hash frequencies equally spaced by an interval <i>BW</i>/<i>p</i> to the same bucket using the hashing function <i>i</i> = <i>f</i> mod <i>BW</i>/<i>p</i>. Further, the value in each bucket is the sum of the values of only the frequencies that hash to the bucket as shown in <a href="#eq7_1">Equation 7.1</a>. Most importantly, aliasing fits naturally to the problem of spectrum acquisition since it can simply be implemented by sampling the signal using a low-speed ADC slower than the Nyquist rate.</p>
<p class="indent">Now that we hashed the frequencies into buckets, we can leverage the fact that the spectrum of interest is sparse and hence most buckets have noise and no signal. BigBand compares the energy (i.e., the magnitude square) of a bucket with the receiver&#8217;s noise level and considers all buckets whose energy is below a threshold to be empty. It then focuses on the occupied buckets and ignores empty buckets.</p>
<p class="h2"><a id="page_89"/><a id="ch7_3_2"/><b><span class="big1">7.3.2</span>&#160;&#160;&#160;&#160;Frequency Estimation</b></p>
<p class="noindent">Next, for each of the occupied buckets we want to identify which frequencies created the energy in these buckets, and what are the values of these frequencies. If we can do that, we then have recovered a complete representation of the frequencies with non-zero signal values, i.e., we acquired the full signal in the Fourier domain.</p>
<p class="indent">Recall that our spectrum is sparse; thus, as mentioned earlier, when hashing frequencies into buckets many buckets are likely to be empty. Even for the occupied buckets, many of these buckets will likely have a single non-zero frequency hashing into them, and only a small number will have a collision of multiple non-zero (or occupied) frequencies. In the next section, we present a mechanism to detect whether a bucket has a collision and resolve such collisions. In this section, we focus on buckets with a single non-zero frequency and estimate the value and the position of this non-zero frequency.</p>
<p class="indent">Recall that if there is a single occupied frequency coefficient in the bucket, then the value of this occupied frequency is the value of the bucket. Said differently, the value of a bucket after aliasing, <b>b&#770;</b><i><sub>i</sub></i> is a good estimate of the value of the occupied frequency <b>x&#770;</b><sub><i>f</i></sub> in that bucket, since all other frequencies in the bucket have zero signal value (only noise). Although we can easily find the value of the non-zero frequency in a bucket, we still do not know its frequency position <i>f</i>, since aliasing mapped multiple frequencies to the same bucket. Recall from <a href="09_Chapter01.xhtml#ch1_1_2">Section 1.1.2</a>, to compute <i>f</i>, we can use the <i>phase-rotation property</i> of the Fourier transform, which states that a shift in time domain translates into phase rotation in the frequency domain. We perform the process of bucketization again, after shifting the input signal by <i>&#964;</i>. Since a shift in time translates into phase rotation in the frequency domain, the value of the bucket of changes from <b>b&#770;</b><sub><i>i</i></sub> = <b>x&#770;</b><sub><i>f</i></sub> to <img src="../images/in89_1.png" alt="image"/>. Hence, using the change in the phase of the bucket, we can estimate our frequency of interest and we can do this for all buckets that do not have collisions.</p>
<p class="indent">Two points are worth noting.</p>
<p class="bull">&#8226;&#160;&#160;First, recall that the phase wraps around every 2<i>&#960;</i>. Hence, the value of <i>&#964;</i> has to be small to avoid the phase wrapping around for large values of <i>f</i>. In particular, <i>&#964;</i> should be on the order of 1/<i>BW</i> where <i>BW</i> is the bandwidth of interest. For example, to acquire one GHz of spectrum, <i>&#964;</i> should be on the order of a nanosecond.<sup><a id="fn3" href="#rfn3">3</a></sup></p>
<p class="bull"><a id="page_90"/>&#8226;&#160;&#160;Second, to sample the signal with a <i>&#964;</i> shift, we need a second low-speed ADC that has the same sampling rate as the ADC in the bucketization step but whose samples are delayed by <i>&#964;</i>. This can be achieved by connecting a single antenna to two ADCs using different delay lines (which is what we do in our implementation). Alternatively, one can use different delay lines to connect the clocks to the two ADCs.</p>
<p class="h2"><a id="ch7_3_3"/><b><span class="big1">7.3.3</span>&#160;&#160;&#160;&#160;Collision Detection and Resolution</b></p>
<p class="noindent">We still need to address two questions: How do we distinguish the buckets that have a single non-zero frequency from those that have a collision? And in the case of a collision, how do we resolve the colliding frequencies?</p>
<p class="h3"><a id="ch7_3_3_1"/><b><span class="big2">7.3.3.1</span>&#160;&#160;&#160;&#160;Collision Detection</b></p>
<p class="noindent">Again, we use the <i>phase rotation</i> property of the Fourier transform to determine if a collision has occurred. Specifically, if the bucket contains a single non-zero frequency, i.e., no collision, then performing the bucketization with a time shift <i>&#964;</i> causes only a phase rotation of the value in the bucket but the magnitude of the bucket does not change, i.e., with or without the time shift, <img src="../images/in90_1.png" alt="image"/>. In contrast, consider the case where there is a collision between, say, two frequencies <i>f</i> and <i>f</i>&#8242;. Then the value of the bucket without a time-shift is <img src="../images/in90_2.png" alt="image"/> while its value with a time-shift of <i>&#964;</i> is <img src="../images/in90_3.png" alt="image"/>. Since the colliding frequencies rotate by different phases, the overall magnitude of the bucket will change. Thus, we can determine whether there is a collision or not by comparing the magnitudes of the buckets with and without the time-shift. Note that even if one occasionally falsely detects a collision when there is a single frequency, BigBand can still correct this error. This is because the collision resolution step described next will estimate the values of the presumed colliding frequencies to zero.</p>
<p class="h3"><a id="ch7_3_3_2"/><b><span class="big2">7.3.3.2</span>&#160;&#160;&#160;&#160;Collision Resolution</b></p>
<p class="noindent">To reconstruct the full spectrum, we need to resolve the collisions, i.e., for each non-zero frequency in a collision we need to estimate its value <b>x&#770;</b><sub><i>f</i></sub> and position <i>f</i>. We present two approaches for resolving collisions which may also be combined in case the spectrum is less sparse.</p>
<p class="noindentt"><b>A. Resolving Collisions with Co-prime Aliasing Filters.</b> One approach to resolve collisions is to bucketize the spectrum multiple times using aliasing filters with co-prime sampling rates. As described in <a href="09_Chapter01.xhtml#ch1_1_2">Section 1.1.2</a>, co-prime aliasing filters guarantee (by the Chinese remainder theorem) that any two frequencies that collide in one bucketization will not collide in the other bucketizations. Hence, we can <a id="page_91"/>resolve collisions by iterating between the two co-prime bucketizations. We can estimate the frequencies that did not collide from the first bucketization and subtract them from the colliding buckets in the second bucketization. This frees some of the colliding frequencies in the second bucketization and allows us to estimate them. We can then go back to the first bucketization and subtract these newly estimated frequencies from the buckets where they collided. We can keep iterating until we have recovered all the occupied frequencies.</p>
<p class="indent">Thus, by using co-prime aliasing filters to bucketize and iterating between the bucketizations (i.e., estimating frequencies from buckets where they do not collide and subtracting them from buckets where they do collide) we can recover the spectrum. This suggests that to capture a spectrum bandwidth <i>BW</i>, we can use two ADCs that sample at rates <i>BW</i>/<i>p</i><sub>1</sub> and <i>BW</i>/<i>p</i><sub>2</sub> where <i>p</i><sub>1</sub> and <i>p</i><sub>2</sub> are co-prime. For example, to recover a 1 GHz spectrum, we can use a 42 MHz ADC [DigiKey ADCs 2017] along with a 50 MHz ADC. The combination of these two ADCs can capture a bandwidth of 1.05 GHz because 42 MHz = 1.05 GHz/25 and 50 MHz = 1.05 GHz/21, where 21 and 25 are co-prime. Note that we also repeat each of these co-prime bucketization with a time shift (as explained in <a href="#ch7_3_2">Section 7.3.2</a>, which requires a total of four low-speed ADCs.</p>
<p class="noindentt"><b>B. Resolving Collisions without Co-prime Aliasing Filters.</b> Co-prime aliasing filters are an efficient way to resolve collisions, but they are not necessary. Here, we show how to resolve collisions while still using ADCs that sample at the same rate. This means that one can use one type of ADCs for building the whole system. This makes it possible to build BigBand using only software radios like USRPs [Ettus Inc. 2017].</p>
<p class="indent">We use one type of aliasing filter. However, we perform it for more than twice using multiple different time shifts. To see how this can help resolve collisions, consider again the case where two frequencies <i>f</i> and <i>f</i>&#8242; collide in a bucket. If we use two time shifts <i>&#964;</i><sub>1</sub> and <i>&#964;</i><sub>2</sub>, we get three values for each bucket. For the bucket where <i>f</i> and <i>f</i>&#8242; collide, these values are:</p>
<p class="eqn"><a id="eq7_2"/><img src="../images/eq7_2.png" alt="image"/></p>
<p class="noindent">If we know the positions of <i>f</i> and <i>f</i>&#8242; the above becomes an overdetermined system of equations where the only unknowns are <img src="../images/in91_1.png" alt="image"/>. Since only few frequencies hash into each bucket, there is a limited number of possible values of <i>f</i> and <i>f</i>&#8242;. For each of these possibilities, the above over-determined system can be solved to find <img src="../images/in91_1.png" alt="image"/>. Hence, we can solve overdetermined system for the possible (<i>f, f</i>&#8242;) pairs <a id="page_92"/>and choose the pair that minimizes the mean square error. While the above does not guarantee that the solution is unique, in case multiple pairs (<i>f, f</i>&#8242;) satisfy the equations, BigBand can detect that event and report to the user that the values of these frequencies remain unresolved.<sup><a id="fn4" href="#rfn4">4</a></sup> Our empirical results (in <a href="#ch7_7_3">Section 7.7.3</a>) show, however, that for practical spectrum sparsity (which is about 5%), three shifted bucketizations are enough to uniquely resolve the colliding frequencies.</p>
<p class="indent">We note that though this method requires more digital computation, we only need to do this for the few buckets that have a collision, and we know the number of collisions is small due to the sparsity of the spectrum. We also note that this method can be combined with the co-prime approach to deal with less sparse spectrum. In this case, one uses this method to resolve collisions of two frequencies while iterating between the co-prime filters.</p>
<p class="h1"><b><a id="ch7_4"/><span class="big">7.4</span>&#160;&#160;&#160;&#160;Channel Estimation and Calibration</b></p>
<p class="noindent">The earlier description of BigBand assumes that the different ADCs can sample exactly the same signal at different time-shifts. However, because the signals experience different channels, they will be scaled differently and the ADCs will not be able to sample exactly the same signal.</p>
<p class="indent">To better understand this problem, let us consider the case where we resolve collisions without the co-prime subsampling. In this case, we will have three ADCs each sampling a signal that is delayed by a time shift. In this case, consider a nonzero frequency <i>f</i> whose value is <b>x&#770;</b><sub><i>f</i></sub>. If <i>f</i> hashes to bucket <i>i</i> and does not collide, then the value of the bucket at each of the ADCs can be written as:</p>
<p class="eqn"><a id="eq7_3"/><img src="../images/eq7_3.png" alt="image"/></p>
<p class="noindent">where <i>h<sub>w</sub></i>(<i>f</i>) is the channel on the wireless medium, <i>h</i><sub>1</sub>(<i>f</i>), <i>h</i><sub>2</sub>(<i>f</i>), <i>h</i><sub>3</sub>(<i>f</i>) are the hardware channels on each of the radios, and &#183;(<i>f</i>) indicates that these parameters are frequency dependent. We can ensure that <i>h</i><sub><i>w</i></sub>(<i>f</i>) is the same in all three bucketizations by connecting the RF frontends to the same antenna. As a result, <i>h</i><sub><i>w</i></sub>(<i>f</i>) cancels out once we take the ratios, <img src="../images/in92_1.png" alt="image"/> and <img src="../images/in92_2.png" alt="image"/> of the buckets. However, the hardware channels are different for the different bucketizations. We need to <a id="page_93"/>estimate them and compensate for them in order to perform frequency estimation and also resolve the collisions.</p>
<p class="indent">Furthermore, although it is simple to create time-shifts between the three ADCs as explained in <a href="#ch7_3_2">Section 7.3.2</a>, we need to know the values of these time-shifts <i>&#964;</i><sub>1</sub>, <i>&#964;</i><sub>2</sub> in order to perform frequency estimation based on phase rotation. Hence, we also need a way to estimate these time-shifts.</p>
<p class="h2"><a id="ch7_4_1"/><b><span class="big1">7.4.1</span>&#160;&#160;&#160;&#160;Estimating the Channels and Time-Shifts</b></p>
<p class="noindent">To estimate the channels and the time shifts, we divide the total bandwidth <i>BW</i> that BigBand captures into <i>p</i> consecutive chunks. We then transmit a known signal in each chunk, one by one. Since we only transmit in one chunk at a time, there are no collisions at the receiver after aliasing. We then use <a href="#eq7_3">Equation 7.3</a> to estimate the ratios <img src="../images/in93_1.png" alt="image"/> and <img src="../images/in93_2.png" alt="image"/> for each frequency <i>f</i> in the spectrum.</p>
<p class="indent">Now that we have the ratios, we need to compute <i>h</i><sub>2</sub>(<i>f</i>)/<i>h</i><sub>1</sub>(<i>f</i>) for each frequency <i>f</i>, and the delay <i>&#964;</i><sub>1</sub>. We can estimate this as follows. Both the magnitude and phase of the hardware channel ratio will be different for different frequencies. The magnitude differs with frequency because different frequencies experience different attenuation in the hardware. The phase varies linearly with frequency because all frequencies experience the same delay <i>&#964;</i><sub>1</sub>, and the phase rotation of a frequency <i>f</i> is simply 2<i>&#960;f&#964;</i><sub>1</sub>. We can therefore plot the phase of the ratio as a function of frequency, and compute the delay <i>&#964;</i><sub>1</sub> from the slope of the resulting line.</p>
<p class="indent"><a href="#fig7_2">Figure 7.2</a> shows the phase result of this estimation performed on the USRP software radios used in our implementation described in <a href="#ch7_6">Section 7.6</a>. As expected, the phase is linear across 900 MHz. Hence, by fitting the points in <a href="#fig7_2">Figure 7.2</a> to a line we can estimate the shifts <i>&#964;</i><sub>1</sub>, <i>&#964;</i><sub>2</sub> and the relative phases of the hardware channels (i.e. &#8736;<i>h</i><sub>1</sub>(<i>f</i>)/<i>h</i><sub>2</sub>(<i>f</i>) and &#8736;<i>h</i><sub>1</sub>(<i>f</i>)/<i>h</i><sub>3</sub>(<i>f</i>)). <a href="#fig7_3">Figure 7.3</a> also shows the relative magnitudes of the hardware channels on the USRPs (i.e., &#8736;<i>h</i><sub>1</sub>(<i>f</i>)/&#8736;<i>h</i><sub>2</sub>(<i>f</i>)| and |&#8736;<i>h</i><sub>1</sub>(<i>f</i>)/&#8736;<i>h</i><sub>3</sub>(<i>f</i>)|) over the 900 MHz between 3.05 GHz and 3.95 GHz. These hardware channels and time shifts are stable. For our implementation, we estimated them only once at the setup time.</p>
<p class="h1"><b><a id="ch7_5"/><span class="big">7.5</span>&#160;&#160;&#160;&#160;Differential Sensing of Non-Sparse Spectrum</b></p>
<p class="noindent">We extend BigBand&#8217;s algorithm to sense a non-sparse spectrum. The key idea is that although the spectrum might not be sparse, changes in spectrum usage are typically sparse, i.e., over short intervals, only a small percentage of the frequencies are freed up or become occupied. This makes it possible to estimate the occupancy without sampling the signal at the Nyquist rate. We refer to sparse changes as differential sparsity, and call the extension that deals with such non-sparse spectrum D-BigBand. We note, however, that unlike in the case where the spectrum is sparse, in the non-sparse setting we only perform spectrum sensing but we cannot recover the I and Q components of the signal. Below we explain how we perform bucketization and estimation in D-BigBand.</p>
<div class="cap">
<p class="image"><a id="page_94"/><a id="fig7_2"/><img src="../images/fig7_2.png" alt="image"/></p>
<p class="figcaption"><b>Figure 7.2</b> Phase rotation vs. frequency. The figure shows that the phase rotation between the three USRPs is linear across the 900 MHz frequency spectrum and can be used to estimate the time shifts.</p>
</div>
<div class="cap">
<p class="image"><a id="fig7_3"/><img src="../images/fig7_3.png" alt="image"/></p>
<p class="figcaption"><b>Figure 7.3</b> Hardware channel magnitude. The relative channel magnitudes |<i>h</i><sub>1</sub>(<i>f</i>)/<i>h</i><sub>2</sub>(<i>f</i>)| and |<i>h</i><sub>1</sub>(<i>f</i>)/<i>h</i><sub>3</sub>(<i>f</i>)| are not equal to 1 and are not flat across the frequency spectrum. Hence, we need to compensate for these estimates to be able to detect and solve collisions.</p>
</div>
<p class="h2"><a id="page_95"/><a id="ch7_5_1"/><b><span class="big1">7.5.1</span>&#160;&#160;&#160;&#160;Frequency Bucketization</b></p>
<p class="noindent">D-BigBand also bucketizes the spectrum using subsampling filters. However, since the spectrum is not sparse, it is very likely that all buckets will be occupied. Thus, D-BigBand tries to detect changes in the occupancy of frequencies that hash to each buckets. To do so, D-BigBand computes the average power of the buckets over two consecutive time windows <i>TW</i> by performing the bucketization multiple times during each time window.<sup><a id="fn5" href="#rfn5">5</a></sup> Since the changes in spectrum occupancies are sparse, only the average power of few buckets would change between the two time windows. D-BigBand can then focus only on the few buckets where the average power changes.</p>
<p class="h2"><a id="ch7_5_2"/><b><span class="big1">7.5.2</span>&#160;&#160;&#160;&#160;Frequency Estimation</b></p>
<p class="noindent">Now that we know in which buckets the average power has changed, we need to estimate which of the frequencies in the bucket is the one whose occupancy has changed. However, we can no longer use the phase rotation property to estimate these frequencies or resolve their collisions since the phase of the bucket now depends on all the frequencies that hash to the bucket and not just the frequency whose occupancy has changed. Thus, to estimate the changing frequencies we are going to use a different method which we refer to as voting which is similar to the voting approach described in <a href="09_Chapter01.xhtml#ch1_1_3">Section 1.1.3</a> and used in <a href="12_Chapter03.xhtml">Chapter 3</a>. We repeat the bucketization multiple times while randomizing which frequencies hash to which buckets. After that, each bucketization votes for frequencies that hash to buckets where the power changed. Frequencies that get the most number of votes are picked as the ones whose occupancy has changed. To randomize the bucketizations, we simply use co-prime subsampling, which, as described in <a href="#ch7_3_3_2">Section 7.3.3.2</a>, guarantees that frequencies that hash together in one bucketization can not hash together in the other bucketizations.</p>
<p class="indent">As with any differential system, we need to initialize the state of spectrum occupancy. However, an interesting property of D-BigBand is that we can initialize the occupancy of each frequency in the spectrum to unknown. This is because when we take the difference in power we can tell whether the frequency became occupied or it became empty. Specifically, a negative power difference implies that the corresponding frequency became empty, and a positive power difference implies that the corresponding frequency became occupied. Hence, once the occupancy of <a id="page_96"/>a frequency changes, we can tell its current state irrespective of its previous state. This avoids the need for initialization and prevents error propagation.</p>
<p class="h1"><b><a id="ch7_6"/><span class="big">7.6</span>&#160;&#160;&#160;&#160;A USRP-Based Implementation</b></p>
<p class="h2"><a id="ch7_6_1"/><b><span class="big1">7.6.1</span>&#160;&#160;&#160;&#160;Implementing BigBand</b></p>
<p class="noindent">As a proof of concept, we implement BigBand using USRP N210 software radios [Ettus Inc. 2017]. Since the USRPs use the same ADCs, it is not possible to have co-prime subsampling rates. Thus, our implementation relies on resolving collisions without co-prime subsampling.</p>
<p class="indent">We use three USRP N210 radios with the SBX daughterboards, which can operate in the 400 MHz to 4.4 GHz range. The clocks of the three USRPs are synchronized using an external GPSDO clock [Jackson Labs, Fury GPSDO 2017]. In order to sample the same signal using the three USRPs, we connect the USRPs to the same antenna using a power splitter but with wires of different lengths in order to introduce small time-shifts. We also remove the analog low pass filters on the SBX daughterboards to allow the USRP&#8217;s ADC to receive the entire bandwidth that its analog front-end circuitry is designed for. The analog circuitry of the USRP front-end can receive at most 0.9 GHz, which puts an upper bound on the digital bandwidth of the system. The three USRP ADCs each samples the signal at 50 MS/s.<sup><a id="fn6" href="#rfn6">6</a></sup> Thus, our implementation of BigBand captures a bandwidth <i>BW</i> = 900 MHz using only 150 MS/s.</p>
<p class="h2"><a id="ch7_6_2"/><b><span class="big1">7.6.2</span>&#160;&#160;&#160;&#160;Implementing D-BigBand</b></p>
<p class="noindent">D-BigBand&#8217;s frequency estimation relies on using different co-prime subsampling rates and hence we cannot implement D-BigBand directly on USRPs. Thus, to verify that D-BigBand can sense a non-sparse spectrum, we use trace-driven experiments. To collect traces of one GHz of highly occupied spectrum, we use many USRPs to transmit and receive. Since we have a total of 20 USRPs, we divide them into 10 receivers and 10 transmitters and capture 250 MHz at a time. We repeat this 4 times at center frequencies that are 250 MHz apart and stitch them together in the frequency domain to capture the full 1 GHz spectrum. We then perform the inverse <a id="page_97"/>FFT to obtain a time signal sampled at 1 GHz. We now subsample this time domain signal using three co-prime rates: 1/21, 1/20, and 1/23 GHz. We run D-BigBand using these sub-sampled versions of the signal.</p>
<p class="h1"><b><a id="ch7_7"/><span class="big">7.7</span>&#160;&#160;&#160;&#160;BigBand&#8217;s Spectrum Sensing Results</b></p>
<p class="h2"><a id="ch7_7_1"/><b><span class="big1">7.7.1</span>&#160;&#160;&#160;&#160;Outdoor Spectrum Sensing</b></p>
<p class="noindent">We collect outdoor measurements from the roof top of a 24-floor MIT building. We use BigBand to capture the signal between 2 GHz and 2.9 GHz over 30 min. We configure BigBand to compute the spectrum over an FFT window of size <i>W</i>. We report here results for <i>W</i> = 10 ms and <i>W</i> = 100 <i>&#956;</i>s. We calculate the occupancy of a particular frequency as the percentage of the FFT windows during which the frequency was occupied (i.e., the power at that frequency was at least twice the noise power).</p>
<p class="noindent"><a href="#fig7_4">Figure 7.4</a> shows the fraction of time that each chunk of spectrum between 2 GHz and 2.9 GHz is occupied, as recovered by BigBand. These results were confirmed using a spectrum analyzer. The figure shows that the spectrum is sparsely occupied. In particular, the occupancy is about 5% when considered over FFT windows of 10 ms and drops to about 2%, when viewed over windows of 100 <i>&#956;</i>s. The figure shows that even frequencies that look 100% occupied over 10 ms windows, become less occupied when viewed over shorter intervals. This is because while these frequencies are occupied for some fraction of every 10 ms interval, there is a large number of shorter windows within each 10 ms where these frequencies are not occupied. For example, the WiFi band around 2.4 GHz seems fully utilized when checked over 10 ms windows; yet if one views it over windows that are 100 times shorter (i.e., 100/<i>&#956;</i>s), one would discover that the medium is almost always idle. In contrast, the band around 2.1 GHz which is used by cellular technologies is occupied even at very short time scales.</p>
<p class="indent">The above implies that the spectrum is sparser at finer time intervals, and provides more opportunities for fine-grained spectrum reuse. This result motivates the need for fast spectrum sensing schemes to exploit these short-term vacancies.</p>
<p class="indent">Finally, we note that measurements collected in other locations or on different dates show similar results to those in <a href="#fig7_4">Figure 7.4</a> but may differ slightly in which frequencies are occupied. Measurements from higher parts of the spectrum are qualitatively similar but have significantly higher sparsity (we omit the figures for lack of space).</p>
<div class="cap">
<p class="image"><a id="page_98"/><a id="fig7_4"/><img src="../images/fig7_4.png" alt="image"/></p>
<p class="figcaption"><b>Figure 7.4</b> Spectrum occupancy results. The figure shows the average spectrum occupancy at our geographical location on Friday, January 15, 2013, between 1&#8211;2 <small>PM</small>, as viewed at a 10 ms granularity (top) and 100 <i>&#956;</i>s granularity (bottom). It shows that the spectrum is sparsely occupied. Further, the sparsity increases when one computes the occupancy over shorter time windows.</p>
</div>
<p class="h2"><a id="ch7_7_2"/><b><span class="big1">7.7.2</span>&#160;&#160;&#160;&#160;BigBand vs. Spectrum Scanning</b></p>
<p class="noindent">Most of today&#8217;s spectrum sensing equipment relies on scanning. Even expensive, power hungry spectrum analyzers typically capture a 100 MHz bandwidth in one shot, and end up scanning to capture a larger spectrum [Tektronix 2017]. The performance of sequentially scanning the spectrum depends mainly on how fast the device can scan a GHz of bandwidth. In the absence of fast scanning, the system can miss radar and other highly dynamic signals. Here, we compare how fast it would take to scan the 900 MHz bandwidth using three techniques: state-of-the-art spectrum monitors like the RFeye [RFeye Node 2017], which is used in the Microsoft spectrum observatory, 3 USRPs sequentially scanning the 900 MHz, or 3 USRPs using BigBand.</p>
<p class="tcaption"><a id="page_99"/><a id="tab7_1"/><b>Table 7.1 Spectrum sensing scanning time. BigBand is multiple orders of magnitude faster than other technologies. This allows it to perform real-time sensing to take advantage of even short-term spectrum vacancies</b>.</p>
<p class="image"><img src="../images/tab7_1.png" alt="image"/></p>
<p class="indent"><a href="#tab7_1">Table 7.1</a> shows the results for different FFT window sizes. In all cases, BigBand takes exactly the time of the FFT window to acquire the 900 MHz spectrum. The 3 USRPs combined can scan 150 MHz at a time and hence need to scan 6 times to acquire the full 900 MHz. For FFT window sizes lower than 10 ms, the scanning time is about 48 ms. Hence, the USRPs spend very little time actually sensing the spectrum, which will lead to a lot of missed signals. Of course, state of the art spectrum monitors can do much better. The RFeye node has a fast scanning mode of 40 GHz/s [RFeye Node 2017]. It scans in chunks of 20 MHz and thus will take 22.5 ms to scan 900 MHz. Note that RFeye has a maximum resolution of 20 kHz, and hence does not support FFT windows larger than 50 <i>&#956;</i>s.</p>
<p class="indent">Thus, BigBand, which uses off-the-shelf components, is much faster than even expensive scanning based solutions, allowing it to detect short-term spectrum vacancies.</p>
<p class="h2"><a id="ch7_7_3"/><b><span class="big1">7.7.3</span>&#160;&#160;&#160;&#160;BigBand&#8217;s Sparsity Range</b></p>
<p class="noindent">The primary motivation of BigBand is to be able to sense sparse spectrum. In this section, we verify the range of sparsity for which BigBand works. We run our experiments between 3.05 GHz and 3.95 GHz because this band is effectively empty (see <a href="#fig7_1">Figure 7.1</a>), and hence enables us to perform controlled experiments. We vary the sparsity in the 3.05&#8211;3.95 GHz range between 1% and 10% by transmitting from 5 different USRPs. Each USRP transmits a signal whose bandwidth is at least 1 MHz and at most 20 MHz. We randomize the bandwidth and the center frequencies of the signals transmitted by the USRPs. For each sparsity level, we repeat the experiment 100 times with different random choices of bandwidth and center frequencies. We run BigBand over a 1 ms FFT window. We consider three metrics.</p>
<div class="cap">
<p class="image"><a id="page_100"/><a id="fig7_5"/><img src="../images/fig7_5.png" alt="image"/></p>
<p class="figcaption"><b>Figure 7.5</b> False negatives and positives as a function of spectrum sparsity. BigBand&#8217;s false positive and false negative rates are extremely low.</p>
</div>
<p class="hang"><b>False Negatives.</b> The fraction of occupied frequencies that BigBand incorrectly reports as empty.</p>
<p class="hang"><b>False Positives.</b> The fraction of empty frequencies that BigBand incorrectly reports as occupied.</p>
<p class="hang"><b>Unresolved Frequencies.</b> The fraction of total frequencies that BigBand cannot resolve due to unresolved collisions.</p>
<p class="indentt"><a href="#fig7_5">Figure 7.5</a> shows that BigBand&#8217;s false positives and false negatives rates are extremely low. The probability of false positive stays below 0.0005 even when 10% of the spectrum is occupied. The probability of false negative is less than 0.002 when the spectrum occupancy is less than 5%, and stays within 0.003 even when the spectrum occupancy goes up to 10%.</p>
<p class="indent"><a href="#fig7_6">Figure 7.6</a> shows that the fraction of unresolved frequencies is less than 0.03 when the spectrum usage is below 5%. This number increases as the spectrum usage increases, but stays below 0.14 when 10% of the spectrum is used. Unresolved frequencies increase as spectrum usage increases because the probability of collision increases. Note, however, that in contrast to false positive and false negatives, BigBand knows which exact frequencies it could not resolve and reports these frequencies with the label &#8220;not-estimated.&#8221; Thus, unresolved frequencies show lack of information as opposed to errors. The application can decide how to treat unresolved frequencies. For dynamic spectrum access, it can simply avoid the unresolved frequencies.</p>
<div class="cap">
<p class="image"><a id="page_101"/><a id="fig7_6"/><img src="../images/fig7_6.png" alt="image"/></p>
<p class="figcaption"><b>Figure 7.6</b> Unresolved frequencies as a function of spectrum sparsity. BigBand cannot resolve around 2% of the frequencies with 5% spectrum occupancy, and stays below 14% even when spectrum occupancy grows as large as 10%.</p>
</div>
<p class="indent">We also note that real-world spectrum measurements, for instance, in the Microsoft observatory, and our results, reveal that actual spectrum usage is 2&#8211;5%. In this regime, BigBand&#8217;s unresolved frequencies are less than 0.03. Further, if the occupancy is high, one may use D-BigBand, which deals with high occupancies (see results in <a href="#ch7_9">Section 7.9</a>.)</p>
<p class="h1"><b><a id="ch7_8"/><span class="big">7.8</span>&#160;&#160;&#160;&#160;BigBand&#8217;s Decoding Results</b></p>
<p class="h2"><a id="ch7_8_1"/><b><span class="big1">7.8.1</span>&#160;&#160;&#160;&#160;Decoding Multiple Transmitters</b></p>
<p class="noindent">In this section, we verify that BigBand can concurrently decode a large number of transmitters from diverse parts of the spectrum. All the transmitters in our implementation use the same technology, but the result naturally generalizes to transmitters using different technologies.</p>
<p class="indent">We use 10 USRPs to emulate up to 30 transmitters hopping in a spectrum of 0.9 GHz. At any given time instant, each device uses 1 MHz of spectrum to transmit a BPSK signal. Similar to the Bluetooth frequency hopping standard, we assume that there is a master that assigns a hopping sequence to each device that ensures that no two devices hop to the same frequency at the same time instant. Note, however, that the hopping sequence for different devices allows them to hop to frequencies that get aliased to the same bucket at a particular time instant, and hence collide in BigBand&#8217;s aliasing filters. Like in Bluetooth, each transmitter hops 1, 3, or 5 times per packet, depending on the length of the packet.</p>
<div class="cap">
<p class="image"><a id="page_102"/><a id="fig7_7"/><img src="../images/fig7_7.png" alt="image"/></p>
<p class="figcaption"><b>Figure 7.7</b> BigBand&#8217;s packet loss as a function of the number of simultaneous transmitters. BigBand can decode as many as 30 transmitters spread across a 900 MHz wide band, while keeping the packet loss less than 3.5%.</p>
</div>
<p class="indent"><a href="#fig7_7">Figure 7.7</a> shows the packet loss rate versus the number of devices hopping in the spectrum. It shows that BigBand can decode the packets from 30 devices spanning a bandwidth of 900 MHz with a packet loss rate less than 3.5%. Decoding all these transmitters without BigBand would either require a wideband 0.9 GHz receiver, or a receiver with 30 RF-frontends, both of which would be significantly more costly and power-hungry.</p>
<p class="h2"><a id="ch7_8_2"/><b><span class="big1">7.8.2</span>&#160;&#160;&#160;&#160;Signal-to-Noise Ratio</b></p>
<p class="noindent">It is expected that BigBand will have more noise than a narrowband receiver since it can capture a much larger bandwidth. This section aims to shed insight on this issue. We note three types of noise: thermal noise, quantization noise and ADC jitter noise [Abari et al. 2013]. BigBand has higher thermal noise due to bucketization. Specifically, since in our implementation the 900 MHz bandwidth is aliased into 50 MHz, it is expected that the thermal noise would increase by 18&#215; (12.5 dB). However, quantization noise and ADC jitter noise do not alias, and hence do not increase. The overall increase in noise depends on how the thermal noise compares to these other types of noise.</p>
<p class="tcaption"><a id="page_103"/><a id="tab7_2"/><b>Table 7.2 Reduction in SNR at different quantization levels</b></p>
<p class="image"><img src="../images/tab7_2.png" alt="image"/></p>
<p class="indent">To understand the impact of thermal noise and quantify the SNR performance of BigBand, we compare it with a 50 MHz narrowband receiver that uses the same USRP hardware. We transmit a 10 MHz signal, receive it on BigBand and the narrowband receiver, and compare the resulting SNR. We connect BigBand and the narrowband receiver to the same antenna and ensure that both receivers&#8217; rx-gains are set properly so that the received signal amplitude spans the same range on both receivers. We run it for different receive signal strengths and measure the SNR on each. We repeat the measurements for the ADC quantization set to 8 and 14 bits to better understand the interaction between thermal noise and quantization noise.</p>
<p class="indent"><a href="#tab7_2">Table 7.2</a> shows the mean and max reduction in SNR of a signal received on BigBand relative to the narrowband USRP. The result shows that at 8 bit quantization, the reduction is a little less than 3 dB which means that the 12 dB increase in thermal noise only translates to 3 dB reduction in SNR due to quantization and jitter noise. At a quantization of 14 bits, the SNR reduction becomes 6 dB which means that the ADC jitter noise is still significantly higher than thermal noise. Although this reduction in SNR is significant compared to narrowband receivers, one would require using 18 such receivers to capture in real time the same 900 MHz bandwidth as BigBand which is not practical in terms of cost and bulkiness.</p>
<p class="h1"><b><a id="ch7_9"/><span class="big">7.9</span>&#160;&#160;&#160;&#160;D-BigBand&#8217;s Sensing Results</b></p>
<p class="noindent">In this section, we evaluate D-BigBand&#8217;s ability to sense changes in spectrum occupancy independent of sparsity. We implement D-BigBand as described in <a href="#ch7_6">Section 7.6</a>. We vary the percentage of total occupied frequencies in the spectrum between 1% (sparse) to 95% (almost fully occupied). We then change the number of frequencies that change occupancy every 1 ms by up to 1% (i.e., 10 MHz), and evaluate D-BigBand&#8217;s accuracy in identifying the frequencies that change occupancy.</p>
<p class="indent">As a function of spectrum occupancy, <a href="#fig7_8">Figure 7.8</a> shows the false positives (i.e., frequencies whose occupancy has not changed, but D-BigBand erroneously declared as changed) and false negatives (i.e., frequencies whose occupancy has changed, but D-BigBand erroneously declares as unchanged). We see that D-BigBand robustly identifies changes in occupancy, with both the false positive and the false negative probabilities remaining under 0.02 even for a spectrum occupancy of 95%.</p>
<div class="cap">
<p class="image"><a id="page_104"/><a id="fig7_8"/><img src="../images/fig7_8.png" alt="image"/></p>
<p class="figcaption"><b>Figure 7.8</b> D-BigBand&#8217;s effectiveness as a function of spectrum sparsity. Over a band of 1 GHz, D-BigBand can reliably detect changes in spectrum occupancy even when the spectrum is 95% occupied, as long as the change in spectrum occupancy is less than 1% every ms.</p>
</div>
<p class="h1"><b><a id="ch7_10"/><span class="big">7.10</span>&#160;&#160;Conclusion</b></p>
<p class="noindent">This chapter presented BigBand, a system that enables GHz-wide sensing and decoding using commodity radios. As a spectrum sensing device, it could sense the occupancy of the spectrum under both sparse and non-sparse cases. As a reception device, it is the first receiver that can decode a sparse signal whose bandwidth is larger than its own digital bandwidth. Empirical evaluation demonstrates that BigBand is able to sense the spectrum stably and dynamically under different sparsity levels; we also demonstrate BigBand&#8217;s effectiveness as a receiver to decode GHz-wide sparse signals. We believe that BigBand enables multiple applications that would otherwise require expensive and power hungry devices, e.g., real-time spectrum monitoring, dynamic spectrum access, and concurrent decoding of multiple transmitters in diverse parts of the spectrum.</p>
<p class="line"/>
<p class="foot"><a id="rfn1" href="#fn1">1</a>. MIT campus, Cambridge MA, USA.</p>
<p class="foot"><a id="rfn2" href="#fn2">2</a>. Note that while the algorithms in <a href="14_Chapter05.xhtml">Chapter 5</a> are for 2D signals, the analysis holds due to the equivalence between the 2D case and the 1D case where <i>n</i> is a product of different prime powers [Gilbert et al. 2005a, Iwen 2010a].</p>
<p class="foot"><a id="rfn3" href="#fn3">3</a>. In fact, one can prove a looser version of this constraint where large <i>&#964;</i> are fine. Formally, for <i>&#964;</i> larger than 1/<i>BW</i>, the FFT window size must be a non-integer multiple of <i>&#964;</i>.</p>
<p class="foot"><a id="rfn4" href="#fn4">4</a>. Note that theoretically, for a collision of <i>k</i> frequencies, 2<i>k</i> samples can guarantee a unique solution in the absence of noise.</p>
<p class="foot"><a id="rfn5" href="#fn5">5</a>. The number of times D-BigBand can average is = <i>TW</i>/<i>T</i> where <i>T</i> is the FFT window time.</p>
<p class="foot"><a id="rfn6" href="#fn6">6</a>. In principle, the USRP ADC can sample up to 100 MS/s. However, the USRP digital processing chain cannot support this rate and hence the ADC sampling rate can be set to no higher than 50 MS/s.</p>
</body>
</html>
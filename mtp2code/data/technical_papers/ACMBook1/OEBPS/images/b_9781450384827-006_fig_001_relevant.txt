Taking an example from Figure 6.1(a), ES(1) is an event stream with three disparate events. E1 is an interval event represented with E1+ and E1− for the start and end points, respectively; E2 is a point event where E2+ = E2−, and E3 is a semi-interval event represented with E3+ for the start point. The events that belong to the same event stream cannot have overlaps. However, as shown in Figure 6.1(b), events from multiple event streams might be overlapping. This brings us to the next question: How to encode a multi-event stream with overlapping events so the order and temporal structures between events are preserved? As explained before, we seamlessly represent semi-interval and interval events using instantaneous time points in the interval boundaries. As done in Shan Kam and Fu [2000], the relationships between events’ start and end times can represent all of Allen’s principles hence encompassing all relational ordering possibilities. Also, all of Allen’s interval relationships can be described using Freksa’s semi-interval relationships. A simple schema similar to that of Shan Kam and Fu [2000] can be used to encode a multi-event stream in a single linear data stream (Figure 6.1) without any ambiguity with respect to the temporal relationships between overlapping events. Event E1 ends before E2 occurs (<), or event E′1 ends at the same time E3 starts (=).

Figure 6.1(a) Example encoding of a sequence of events. E1+ and E1− represent the start and end times of event E1, respectively. Relational operators are used to indicate the ordered relations between start/end times. (b) Example of encoding a multi-event stream from two sequence of events.